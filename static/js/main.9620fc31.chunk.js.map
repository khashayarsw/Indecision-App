{"version":3,"sources":["Components/OptionModal.js","Components/Helper.js","Components/ID.js","Components/Headers.js","Components/Indecision.js","App.js","serviceWorker.js","index.js"],"names":["OptionModal","props","ariaHideApp","isOpen","show","onRequestClose","handleClose","contentLabel","closeTimeoutMS","className","value","onClick","Helper","state","vaziat","dastresi","modalShow","undefined","handleHelp","get","length","setState","myState","handleValue","Math","floor","random","handleModalShow","disabled","this","btnTitle","getVaziat","Component","defaultProps","ID","mainValue","vaziat2","handleSubmit","event","sayid","preventDefault","inputValue","target","elements","options","trim","forEach","m","console","log","handleDeleteAll","handleGet","map","key","toString","z","filter","t","deleteBtn","style","padding","onSubmit","type","name","insertBtn","Headers","firstTitle","secondTitle","Indecision","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9620fc31.chunk.js","sourcesContent":["import React from 'react';\r\nimport Modal from 'react-modal';\r\n\r\n\r\nconst OptionModal=(props)=>(\r\n     <Modal\r\n       ariaHideApp={false}\r\n       isOpen={props.show}\r\n       onRequestClose={props.handleClose}\r\n       contentLabel='Selected Option'\r\n       closeTimeoutMS={200}\r\n       className=\"modal\"\r\n     >\r\n       <h3 className=\"modal__title\">Selected Option</h3>  \r\n       <p className=\"modal__body\">{props.value()}</p>\r\n       <button className=\"button\" onClick={props.handleClose}>Okay</button>\r\n     </Modal>\r\n    );\r\n\r\nexport default OptionModal;","import React,{Component} from 'react';\r\nimport OptionModal from './OptionModal';\r\nimport '../Helper.css'\r\nclass Helper extends Component{\r\n    static defaultProps={\r\n        btnTitle:'What should i do ?'\r\n    }\r\n    state={\r\n        vaziat:false,\r\n        dastresi:false,\r\n        modalShow:undefined\r\n    }\r\n    handleHelp=()=>{\r\n       if(this.props.get.length>0){\r\n         this.setState((myState)=>(\r\n             {modalShow:true}\r\n            ))\r\n       } \r\n     }\r\n     handleValue=()=>{\r\n        const value=this.props.get;\r\n        var randIndex=Math.floor(Math.random()*value.length);\r\n        return value[randIndex];\r\n     }\r\n     handleModalShow=()=>{\r\n         this.setState((myState)=>(\r\n              {modalShow:undefined}\r\n         ))\r\n     }\r\n    render(){\r\n        return(\r\n            <div>\r\n               <div className=\"container\">\r\n                  <button className='big-button' disabled={this.props.get.length === 0? true : false} onClick={this.handleHelp}>{this.props.btnTitle}</button>\r\n                  <p className={this.props.getVaziat ?'  addOptionTitle show':'addOptionTitle  hidden'}>Please add an option!</p>\r\n                  <OptionModal show={this.state.modalShow} handleClose={this.handleModalShow} value={this.handleValue}/>\r\n               </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Helper;","import React,{Component} from 'react';\r\nimport Helper from './Helper';\r\nimport '../ID.css';\r\nclass ID extends Component{\r\n    static defaultProps={\r\n        insertBtn:'Insert Item',\r\n        deleteBtn:'Remove All'\r\n    }\r\n  \r\n    state={\r\n        mainValue:[],\r\n        vaziat2:false,\r\n       \r\n    }\r\n//     componentDidMount(){\r\n//         const get=localStorage.getItem('values');\r\n//         const final=JSON.parse(get);\r\n//         console.log(get)\r\n//         this.setState((myState)=>{\r\n//             return {mainValue:final}\r\n//         })\r\n//     }\r\n//     componentDidUpdate(){\r\n//         const json=JSON.stringify(this.state.mainValue);\r\n//         console.log(json)\r\n//         localStorage.setItem('values',json);\r\n//    }\r\n    handleSubmit=(event)=>{\r\n        var sayid=true;\r\n        event.preventDefault();\r\n        const inputValue=event.target.elements.options.value.trim();\r\n        if(inputValue){\r\n            this.state.mainValue.forEach((m)=>{\r\n                if(m===inputValue){\r\n                   console.log(true)\r\n                   sayid=false\r\n                }\r\n            })\r\n            if(sayid===true){  this.setState((myState)=>{\r\n                return {mainValue:[...myState.mainValue,inputValue],vaziat2:false}\r\n            })\r\n        \r\n        \r\n        }\r\n           }else{\r\n            this.setState((myState)=>(\r\n                 {vaziat2:true}\r\n            ))\r\n        }\r\n        event.target.elements.options.value='';\r\n      \r\n    }\r\n    handleDeleteAll=()=>{\r\n      return  this.setState((myState)=>(\r\n             {mainValue:[]}\r\n        ))\r\n    }\r\n    handleGet=()=>{\r\n       return  this.state.mainValue.map((m)=>{\r\n              return(\r\n                 <li key={m.toString()}  className=\"option\">\r\n                    <p className=\"option__text\">{m}</p>\r\n                    <button className=\"button button--link\" onClick={()=>{\r\n                        var z = this.state.mainValue.filter((t)=>m!==t)\r\n                        this.setState((myState)=>{\r\n                           return {mainValue:z}})\r\n                    }}>Remove</button>\r\n                 </li>\r\n              \r\n              ) ;\r\n         })\r\n      }\r\n   render(){\r\n    const pStyle = {\r\n       padding:0\r\n      };\r\n        return(\r\n            <div className=\"container\">\r\n                 <Helper get={this.state.mainValue} getVaziat={this.state.vaziat2}/>\r\n                 <div className=\"widget-header\">\r\n                 <h3 className=\"widget-header__title\">Your Options</h3>\r\n                 <button className=\"button button--link\" onClick={this.handleDeleteAll}>{this.props.deleteBtn}</button>\r\n                 </div>\r\n                 <div className=\"widget\">\r\n                  <div>\r\n                        <ul style={pStyle}>\r\n                        {this.handleGet()}\r\n                       </ul>\r\n                 </div>\r\n                 <form className=\"add-option\" onSubmit={this.handleSubmit}>\r\n                    <input className=\"add-option__input\" type=\"text\" name=\"options\"></input>\r\n                    <button className=\"button\">{this.props.insertBtn}</button>\r\n                 </form>\r\n                 </div>\r\n              \r\n            \r\n              </div>\r\n        );\r\n    }\r\n}\r\nexport default ID;","import React from 'react';\r\nconst Headers = (props)=>(\r\n        <div className='header'>\r\n          <div className=\"container\">\r\n             <h1 className='header_h1'>{props.firstTitle}</h1>\r\n             <h2 className='header_h2'>{props.secondTitle}</h2>\r\n          </div>\r\n        </div>\r\n     );\r\nHeaders.defaultProps = {\r\n    firstTitle:'Indecision',\r\n    secondTitle:'Put your life in the hands of a computer '\r\n}\r\nexport default Headers;","import React,{Component} from 'react';\r\nimport ID from './ID';\r\nimport Headers from './Headers';\r\n\r\nclass Indecision extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n              <Headers/>\r\n              <ID/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Indecision;","import React from 'react';\n// import './App.css';\nimport './Styles/style.scss'\nimport Indecision from './Components/Indecision';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Indecision/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}